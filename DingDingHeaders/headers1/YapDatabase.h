//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 16 2016 16:28:45).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class NSArray, NSDictionary, NSMutableArray, NSString, YapDatabaseConnection, YapDatabaseConnectionDefaults, YapDatabaseOptions;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface YapDatabase : NSObject
{
    YapDatabaseOptions *options;
    NSMutableArray *changesets;
    unsigned long long snapshot;
    NSObject<OS_dispatch_queue> *internalQueue;
    NSObject<OS_dispatch_queue> *checkpointQueue;
    YapDatabaseConnectionDefaults *connectionDefaults;
    NSDictionary *registeredExtensions;
    NSDictionary *registeredMemoryTables;
    NSArray *extensionsOrder;
    NSDictionary *extensionDependencies;
    YapDatabaseConnection *registrationConnection;
    unsigned long long maxConnectionPoolCount;
    double connectionPoolLifetime;
    NSObject<OS_dispatch_source> *connectionPoolTimer;
    NSMutableArray *connectionPoolValues;
    NSMutableArray *connectionPoolDates;
    struct sqlite3 *db;
    void *IsOnSnapshotQueueKey;
    void *IsOnWriteQueueKey;
    NSObject<OS_dispatch_queue> *snapshotQueue;
    NSObject<OS_dispatch_queue> *writeQueue;
    NSMutableArray *connectionStates;
    NSArray *previouslyRegisteredExtensionNames;
    CDUnknownBlockType objectSerializer;
    CDUnknownBlockType objectDeserializer;
    CDUnknownBlockType metadataSerializer;
    CDUnknownBlockType metadataDeserializer;
    CDUnknownBlockType objectSanitizer;
    CDUnknownBlockType metadataSanitizer;
    NSString *databasePath;
}

+ (id)columnNamesAndAffinityForTable:(id)arg1 using:(struct sqlite3 *)arg2;
+ (id)columnNamesForTable:(id)arg1 using:(struct sqlite3 *)arg2;
+ (_Bool)tableExists:(id)arg1 using:(struct sqlite3 *)arg2;
+ (id)pragmaValueForSynchronous:(int)arg1;
+ (id)pragmaValueForAutoVacuum:(int)arg1;
+ (int)pragma:(id)arg1 using:(struct sqlite3 *)arg2;
+ (id)sqliteVersionUsing:(struct sqlite3 *)arg1;
+ (CDUnknownBlockType)timestampDeserializer;
+ (CDUnknownBlockType)timestampSerializer;
+ (CDUnknownBlockType)propertyListDeserializer;
+ (CDUnknownBlockType)propertyListSerializer;
+ (CDUnknownBlockType)defaultDeserializer;
+ (CDUnknownBlockType)defaultSerializer;
@property(readonly, nonatomic) CDUnknownBlockType metadataSanitizer; // @synthesize metadataSanitizer;
@property(readonly, nonatomic) CDUnknownBlockType objectSanitizer; // @synthesize objectSanitizer;
@property(readonly, nonatomic) CDUnknownBlockType metadataDeserializer; // @synthesize metadataDeserializer;
@property(readonly, nonatomic) CDUnknownBlockType metadataSerializer; // @synthesize metadataSerializer;
@property(readonly, nonatomic) CDUnknownBlockType objectDeserializer; // @synthesize objectDeserializer;
@property(readonly, nonatomic) CDUnknownBlockType objectSerializer; // @synthesize objectSerializer;
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath;
- (void).cxx_destruct;
- (void)asyncCheckpoint:(unsigned long long)arg1;
- (void)noteCommittedChanges:(id)arg1 fromConnection:(id)arg2;
- (id)pendingAndCommittedChangesSince:(unsigned long long)arg1 until:(unsigned long long)arg2;
- (void)notePendingChanges:(id)arg1 fromConnection:(id)arg2;
@property(readonly) unsigned long long snapshot;
- (id)registeredMemoryTables;
- (void)handleConnectionPoolTimerFire;
- (void)resetConnectionPoolTimer;
- (struct sqlite3 *)connectionPoolDequeue;
- (_Bool)connectionPoolEnqueue:(struct sqlite3 *)arg1;
@property double connectionPoolLifetime;
@property unsigned long long maxConnectionPoolCount;
- (id)extensionDependencies;
- (id)extensionsOrder;
- (id)registeredExtensions;
- (id)registeredExtension:(id)arg1;
- (void)asyncUnregisterExtension:(id)arg1 completionBlock:(CDUnknownBlockType)arg2 completionQueue:(id)arg3;
- (void)asyncUnregisterExtension:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)unregisterExtension:(id)arg1;
- (void)_unregisterExtensionWithName:(id)arg1;
- (_Bool)_registerExtension:(id)arg1 withName:(id)arg2;
- (id)registrationConnection;
- (void)asyncUnregisterExtensionWithName:(id)arg1 completionBlock:(CDUnknownBlockType)arg2 completionQueue:(id)arg3;
- (void)asyncUnregisterExtensionWithName:(id)arg1 completionQueue:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)asyncUnregisterExtensionWithName:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)unregisterExtensionWithName:(id)arg1;
- (void)asyncRegisterExtension:(id)arg1 withName:(id)arg2 completionBlock:(CDUnknownBlockType)arg3 completionQueue:(id)arg4;
- (void)asyncRegisterExtension:(id)arg1 withName:(id)arg2 completionQueue:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)asyncRegisterExtension:(id)arg1 withName:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (_Bool)registerExtension:(id)arg1 withName:(id)arg2;
- (id)newConnection;
- (void)removeConnection:(id)arg1;
- (void)addConnection:(id)arg1;
@property unsigned long long defaultAutoFlushMemoryFlags;
@property long long defaultMetadataPolicy;
@property long long defaultObjectPolicy;
@property unsigned long long defaultMetadataCacheLimit;
@property _Bool defaultMetadataCacheEnabled;
@property unsigned long long defaultObjectCacheLimit;
@property _Bool defaultObjectCacheEnabled;
- (id)connectionDefaults;
- (void)fetchPreviouslyRegisteredExtensionNames;
- (void)writeSnapshot;
- (void)commitTransaction;
- (void)beginTransaction;
- (void)prepare;
- (void)upgradeTable;
- (_Bool)upgradeTable_2_3;
- (_Bool)upgradeTable_1_2;
- (_Bool)set_user_version:(int)arg1;
- (_Bool)get_user_version:(int *)arg1;
- (_Bool)createTables;
- (_Bool)configureDatabase:(_Bool)arg1;
- (_Bool)openDatabase;
- (void)dealloc;
- (id)initWithPath:(id)arg1 objectSerializer:(CDUnknownBlockType)arg2 objectDeserializer:(CDUnknownBlockType)arg3 metadataSerializer:(CDUnknownBlockType)arg4 metadataDeserializer:(CDUnknownBlockType)arg5 objectSanitizer:(CDUnknownBlockType)arg6 metadataSanitizer:(CDUnknownBlockType)arg7 options:(id)arg8;
- (id)initWithPath:(id)arg1 objectSerializer:(CDUnknownBlockType)arg2 objectDeserializer:(CDUnknownBlockType)arg3 metadataSerializer:(CDUnknownBlockType)arg4 metadataDeserializer:(CDUnknownBlockType)arg5 objectSanitizer:(CDUnknownBlockType)arg6 metadataSanitizer:(CDUnknownBlockType)arg7;
- (id)initWithPath:(id)arg1 objectSerializer:(CDUnknownBlockType)arg2 objectDeserializer:(CDUnknownBlockType)arg3 metadataSerializer:(CDUnknownBlockType)arg4 metadataDeserializer:(CDUnknownBlockType)arg5;
- (id)initWithPath:(id)arg1 serializer:(CDUnknownBlockType)arg2 deserializer:(CDUnknownBlockType)arg3 sanitizer:(CDUnknownBlockType)arg4;
- (id)initWithPath:(id)arg1 serializer:(CDUnknownBlockType)arg2 deserializer:(CDUnknownBlockType)arg3;
- (id)initWithPath:(id)arg1;
@property(readonly, copy, nonatomic) YapDatabaseOptions *options; // @dynamic options;

@end

